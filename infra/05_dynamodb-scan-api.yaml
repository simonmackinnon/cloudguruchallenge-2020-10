Parameters:
  ApiName:
    Type: String
    Default: MovieDataApi
    Description: "creation of api"
  EnvironmentName:
    Type: String
    Default: MovieDataLoader
  PathPart:
    Type: String
    Default: search
Resources:
  APIGatewayMovieDataServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:Get*"
                Resource: "arn:aws:dynamodb:ap-southeast-2:955966247963:table/MovieData"
  MovieDataApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties: 
      Name: !Ref ApiName
  MovieDataResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: MovieDataApi
      ParentId:
        Fn::GetAtt:
          - MovieDataApi
          - RootResourceId
      PathPart: 
        Ref: PathPart
  MovieDataGet:
    DependsOn: MovieDataApi
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: 
        Ref: MovieDataApi
      ResourceId: 
        Ref: MovieDataResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        Credentials: !GetAtt APIGatewayMovieDataServiceRole.Arn
        Type: AWS
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan"
        RequestTemplates:
          application/json: >-
            {
                "TableName": "MovieData"
            }
        IntegrationResponses:
          - ResponseTemplates:
              application/json: >-
               #set($inputRoot = $input.path('$'))
               {
                   "records": [
                       #foreach($elem in $inputRoot.Items) {
                           "date": "$elem.date.S",
                           "cases": "$elem.cases.N",
                           "deaths": "$elem.deaths.N",
                           "recovered": "$elem.recovered.N"
                       }#if($foreach.hasNext),#end
                   #end
                   ]
               }
            StatusCode: 200
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          StatusCode: 200
  MovieDataApiDeploy:
    DependsOn: 
      - MovieDataApi
      - MovieDataGet
      - MovieDataResource      
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId:
        Ref: MovieDataApi
      Description: "Deployment for this MovieDataApi"
      StageName: 'live'
      
Outputs:
  MovieDataApiUrl:
    Description: Url of deployed API
    Value: !Sub "https://${MovieDataApi}.execute-api.${AWS::Region}.amazonaws.com/live/${PathPart}"
    Export: 
      Name: !Sub ${EnvironmentName}:MovieDataApiUrl