Parameters:
  EnvironmentName:
    Type: String
    Default: MovieDataLoader
Resources:
  DDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "titleid"
          AttributeType: "S"
        -
          AttributeName: "label"
          AttributeType: "N"
      KeySchema:
        -
          AttributeName: "label"
          KeyType: "HASH"
        - 
          AttributeName: 'titleid'
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: "movieData"
  WriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 15
      MinCapacity: 5
      ResourceId: !Join
        - /
        - - table
          - !Ref DDBTable
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      ServiceNamespace: dynamodb
  ScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "dynamodb:DescribeTable"
                  - "dynamodb:UpdateTable"
                  - "cloudwatch:PutMetricAlarm"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:GetMetricStatistics"
                  - "cloudwatch:SetAlarmState"
                  - "cloudwatch:DeleteAlarms"
                Resource: "*"
  WriteScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref WriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
  MovieDataLoadFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket:
          Fn::ImportValue: !Sub ${EnvironmentName}:coreinf-functionbucket
        S3Key: 'MovieDataLoaderFunction.zip'
      Description: 'Function to perform ETL operations on Movie Data'
      FunctionName: 'MovieDataLoader'
      Handler: 'refresh_movies_table.event_handler'
      MemorySize: 256
      ReservedConcurrentExecutions: 1
      Role: !GetAtt MovieDataLoadLambdaExecutionRole.Arn
      Runtime: 'python3.6'
      Timeout: 900
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub ${EnvironmentName}:NoIngressSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${EnvironmentName}:PrivateSubnet1
          - Fn::ImportValue: !Sub ${EnvironmentName}:PrivateSubnet2
      Environment:
        Variables:
          LOGGER_LEVEL: INFO
          BUCKET_NAME: 
            Fn::ImportValue: !Sub ${EnvironmentName}:coreinf-functionbucket
          TABLE_NAME:  !Ref DDBTable
  MovieDataLoadLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - dynamodb:PutItem
            - dynamodb:DescribeTable
            - dynamodb:Scan
            - dynamodb:BatchWriteItem
            Resource: !GetAtt DDBTable.Arn
          - Effect: Allow
            Action:
            - s3:Get*
            Resource: !Join
              - ''
              - - Fn::ImportValue: !Sub ${EnvironmentName}:MovieBucketArn
                - "/*"
          - Effect: Allow
            Action:
            - ec2:DescribeNetworkInterfaces
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeInstances
            - ec2:AttachNetworkInterface
            Resource: '*'
          - Effect: Allow
            Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
            Resource: '*'
  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "ScheduledRule"
      ScheduleExpression: "cron(0 16 ? * 1 *)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "MovieDataLoadFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "MovieDataLoadFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"

  MovieRecommendFunction:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        S3Bucket:
          Fn::ImportValue: !Sub ${EnvironmentName}:coreinf-functionbucket
        S3Key: 'MovieRecommend.zip'
      Description: 'Function to perform movie recommendations'
      FunctionName: 'MovieRecommendFunction'
      Handler: 'recommend_movies.event_handler'
      MemorySize: 256
      ReservedConcurrentExecutions: 1
      Role: !GetAtt MovieRecommendLambdaExecutionRole.Arn
      Runtime: 'python3.6'
      Timeout: 240
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: !Sub ${EnvironmentName}:NoIngressSecurityGroup
        SubnetIds:
          - Fn::ImportValue: !Sub ${EnvironmentName}:PrivateSubnet1
          - Fn::ImportValue: !Sub ${EnvironmentName}:PrivateSubnet2
      Environment:
        Variables:
          LOGGER_LEVEL: INFO
          TABLE_NAME:  !Ref DDBTable
  MovieRecommendLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - dynamodb:Scan
            - dynamodb:Query
            Resource: !GetAtt DDBTable.Arn
          - Effect: Allow
            Action:
            - ec2:DescribeNetworkInterfaces
            - ec2:CreateNetworkInterface
            - ec2:DeleteNetworkInterface
            - ec2:DescribeInstances
            - ec2:AttachNetworkInterface
            Resource: '*'
          - Effect: Allow
            Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
            Resource: '*'



Outputs:
  MovieDataLoadFunction:
    Description: Lambda function that loads the Movie data into DynamoDB
    Value: !Ref MovieDataLoadFunction
    Export: 
      Name: !Sub ${EnvironmentName}:MovieDataLoadFunction
  MovieRecommendFunction:
    Description: Lambda function that recommends movies based on input
    Value: !Ref  MovieRecommendFunction
    Export: 
      Name: !Sub ${EnvironmentName}:MovieRecommendFunction
  MovieRecommendFunctionArn:
    Description: ARN of Lambda function that recommends movies based on input 
    Value: !GetAtt MovieRecommendFunction.Arn
    Export: 
      Name: !Sub ${EnvironmentName}:MovieRecommendFunctionArn
  DDBTable:
    Description: DynamoDB table with Movie data in it
    Value: !Ref DDBTable
    Export: 
      Name: !Sub ${EnvironmentName}:MovieDDBTable
  DDBTableArn:
    Description: DynamoDB table ARN with Movie data in it
    Value: !GetAtt DDBTable.Arn
    Export: 
      Name: !Sub ${EnvironmentName}:MovieDDBTableArn
    