AWSTemplateFormatVersion: "2010-09-09"
Description: "My API Gateway and Lambda function"

Parameters:
  ApiStageName:
    Type: "String"
    AllowedPattern: "^[a-z0-9]+$"
    Default: "live"
  EnvironmentName:
    Type: String
    Default: MovieDataLoader

Resources:
  MovieRecommenderApi:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: "movie-recommend-api"
      Description: "Movie Recommend API"

  MovieRecommenderApiRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Join
              - ''
              - - !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/"
                - Fn::ImportValue: !Sub ${EnvironmentName}:MovieRecommendFunctionArn
                - "/invocations"
      ResourceId: !GetAtt "MovieRecommenderApi.RootResourceId"
      RestApiId: !Ref "MovieRecommenderApi"

  MovieRecommenderApiDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "MovieRecommenderApiRootMethod"
    Properties:
      RestApiId: !Ref "MovieRecommenderApi"
      StageName: !Ref "ApiStageName"

  MovieRecommenderApiInvoke:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: 
        Fn::ImportValue: !Sub ${EnvironmentName}:MovieRecommendFunctionArn
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${MovieRecommenderApi}/*/GET/"
      
  MovieRecommenderApiIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource: 
                  Fn::ImportValue: !Sub ${EnvironmentName}:MovieRecommendFunctionArn

  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: MovieRecommenderApi
      ResourceId: !GetAtt "MovieRecommenderApi.RootResourceId"
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

Outputs:
  MovieRecommenderApiInvokeURL:
    Value: !Sub "https://${MovieRecommenderApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}"